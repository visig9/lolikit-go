// Code generated by mockery v1.0.0. DO NOT EDIT.

package config

import mock "github.com/stretchr/testify/mock"

// mockIUtil is an autogenerated mock type for the iUtil type
type mockIUtil struct {
	mock.Mock
}

// getDefaultRepoPath provides a mock function with given fields: uv
func (_m *mockIUtil) getDefaultRepoPath(uv iViper) string {
	ret := _m.Called(uv)

	var r0 string
	if rf, ok := ret.Get(0).(func(iViper) string); ok {
		r0 = rf(uv)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// getRepoConfPath provides a mock function with given fields: repoPath
func (_m *mockIUtil) getRepoConfPath(repoPath string) string {
	ret := _m.Called(repoPath)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(repoPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// getRepoPath provides a mock function with given fields: flagRepoPath, cwdPath, defaultPath
func (_m *mockIUtil) getRepoPath(flagRepoPath string, cwdPath string, defaultPath string) (string, error) {
	ret := _m.Called(flagRepoPath, cwdPath, defaultPath)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string) string); ok {
		r0 = rf(flagRepoPath, cwdPath, defaultPath)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(flagRepoPath, cwdPath, defaultPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getUserConfPath provides a mock function with given fields: xdgConfigHome, home
func (_m *mockIUtil) getUserConfPath(xdgConfigHome string, home string) string {
	ret := _m.Called(xdgConfigHome, home)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(xdgConfigHome, home)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// getViper provides a mock function with given fields: confPath
func (_m *mockIUtil) getViper(confPath string) (iViper, error) {
	ret := _m.Called(confPath)

	var r0 iViper
	if rf, ok := ret.Get(0).(func(string) iViper); ok {
		r0 = rf(confPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iViper)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(confPath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
